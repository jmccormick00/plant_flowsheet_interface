/*------------------------------------------------------------------------------
 * Application.java
 * Author: James McCormick
 * Description: the front end GUI for the application
 *----------------------------------------------------------------------------*/
package Application;

import Diagram.BaseDiagram;
import Diagram.IDiagram;
import DiagramEditor.DiagramEditor;
import DiagramEditor.MacroRegistry;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class Application extends javax.swing.JFrame {
    
    private MacroRegistry d_macroRegistry = new MacroRegistry();
    
    private DiagramEditor getCurrentTab() {
        return (DiagramEditor)d_tabbedPane.getSelectedComponent();
    }
    
    private void setCurrentMacro(MacroRegistry.MacroID id) {
        DiagramEditor d = getCurrentTab();
        if(d != null) {
            try {
                d.setMacro(d_macroRegistry.getMacro(id, d));
            } catch(Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }
    
    private class KeyBoardDispatcher implements KeyEventDispatcher {
        
        @Override
        public boolean dispatchKeyEvent(KeyEvent e) {
            if(e.getID() != KeyEvent.KEY_PRESSED) return false;
            
            DiagramEditor v = (DiagramEditor)d_tabbedPane.getSelectedComponent();
            switch(e.getKeyCode()) {
                case KeyEvent.VK_ESCAPE: {
                    if(v != null) {
                        v.clearSelection();
                        v.clearMacro();
                        Console.getInstance().printLine("*Cancel*");
                    }
                    return true;    // Dont forward to focused compenent
                }
                case KeyEvent.VK_DELETE: {
                    if(v != null) {
                        v.deleteSelected();
                    }
                    return true;    // Dont forward to focused compenent
                }
                    
                case KeyEvent.VK_TAB: {
                    final int count = d_tabbedPane.getTabCount();
                    if(count != 0) {
                        if(e.isControlDown()) {
                            int i = d_tabbedPane.getSelectedIndex();
                            if(++i == count) i = i - count;
                            d_tabbedPane.setSelectedIndex(i);
                            return true;    // Dont forward to focused compenent
                        }
                        return false;
                    }
                }
                    
                case KeyEvent.VK_SPACE: {
                    if(AppUtility.getCaptureSpaceBar()) return false;
                    if(v != null) { // if the current tab is not null, tell it to revert to previous macro
                        if(v.isDefualtMacroCurrent()) {
                            setCurrentMacro(v.getPrevMacroID());
                        } else {
                            v.clearMacro();
                        }
                    }
                    return true;    // Dont forward to focused compenent
                }
                    
            } // end switch
            return false;
        }
    }
 
    
    /** Creates new form application */
    public Application() {
        initComponents();
        Console.getInstance().setTextArea(d_consoleDisplay);
        KeyboardFocusManager.getCurrentKeyboardFocusManager()
                .addKeyEventDispatcher(new KeyBoardDispatcher());
        
        d_tabbedPane.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) { // Clear the macro when the current tab is changed
                DiagramEditor d = getCurrentTab();
                d.clearMacro();
            }
        });
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        d_tabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        d_consoleDisplay = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        d_zoomWindowButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        d_paletteTree = new javax.swing.JTree();
        jMenuBar1 = new javax.swing.JMenuBar();
        d_fileMenu = new javax.swing.JMenu();
        d_newTabMenu = new javax.swing.JMenuItem();
        d_deleteTabMenu = new javax.swing.JMenuItem();
        d_editMenu = new javax.swing.JMenu();
        d_copyCommand = new javax.swing.JMenuItem();
        d_cutCommand = new javax.swing.JMenuItem();
        d_pasteCommand = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        d_allSelectionCommand = new javax.swing.JMenuItem();
        d_noneSelectionCommand = new javax.swing.JMenuItem();
        d_invertSelectCommand = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prototype");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        d_tabbedPane.setBackground(new java.awt.Color(153, 153, 153));
        d_tabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        d_tabbedPane.setDoubleBuffered(true);
        d_tabbedPane.setMinimumSize(new java.awt.Dimension(500, 500));
        jSplitPane2.setTopComponent(d_tabbedPane);

        d_consoleDisplay.setColumns(20);
        d_consoleDisplay.setEditable(false);
        d_consoleDisplay.setRows(5);
        jScrollPane1.setViewportView(d_consoleDisplay);

        jSplitPane2.setRightComponent(jScrollPane1);

        jToolBar1.setRollover(true);

        d_zoomWindowButton.setText("ZoomWindow");
        d_zoomWindowButton.setFocusable(false);
        d_zoomWindowButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        d_zoomWindowButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        d_zoomWindowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d_zoomWindowButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(d_zoomWindowButton);

        jScrollPane2.setViewportView(d_paletteTree);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
        );

        d_fileMenu.setText("File");

        d_newTabMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        d_newTabMenu.setText("New Tab");
        d_newTabMenu.setToolTipText("Creates a new tab");
        d_newTabMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d_newTabMenuActionPerformed(evt);
            }
        });
        d_fileMenu.add(d_newTabMenu);

        d_deleteTabMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        d_deleteTabMenu.setText("Delete Tab");
        d_deleteTabMenu.setToolTipText("Delete current tab");
        d_deleteTabMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d_deleteTabMenuActionPerformed(evt);
            }
        });
        d_fileMenu.add(d_deleteTabMenu);

        jMenuBar1.add(d_fileMenu);

        d_editMenu.setText("Edit");

        d_copyCommand.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        d_copyCommand.setText("Copy");
        d_copyCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d_copyCommandActionPerformed(evt);
            }
        });
        d_editMenu.add(d_copyCommand);

        d_cutCommand.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        d_cutCommand.setText("Cut");
        d_cutCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d_cutCommandActionPerformed(evt);
            }
        });
        d_editMenu.add(d_cutCommand);

        d_pasteCommand.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        d_pasteCommand.setText("Paste");
        d_pasteCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d_pasteCommandActionPerformed(evt);
            }
        });
        d_editMenu.add(d_pasteCommand);
        d_editMenu.add(jSeparator1);

        d_allSelectionCommand.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        d_allSelectionCommand.setText("Select All");
        d_allSelectionCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d_allSelectionCommandActionPerformed(evt);
            }
        });
        d_editMenu.add(d_allSelectionCommand);

        d_noneSelectionCommand.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        d_noneSelectionCommand.setText("Clear Selection");
        d_noneSelectionCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d_noneSelectionCommandActionPerformed(evt);
            }
        });
        d_editMenu.add(d_noneSelectionCommand);

        d_invertSelectCommand.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        d_invertSelectCommand.setText("Invert Selection");
        d_invertSelectCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d_invertSelectCommandActionPerformed(evt);
            }
        });
        d_editMenu.add(d_invertSelectCommand);

        jMenuBar1.add(d_editMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 695, Short.MAX_VALUE))
            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 117, Short.MAX_VALUE)
                    .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 33, Short.MAX_VALUE)
                    .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void d_newTabMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d_newTabMenuActionPerformed
        String name = JOptionPane.showInputDialog(this, "Enter the name of the new flowsheet:", null, JOptionPane.PLAIN_MESSAGE);
        if(name == null) return;
        while(name.isEmpty()) {
            name = JOptionPane.showInputDialog(this, "Enter the name of the new flowsheet:", "Name cannot be empty", JOptionPane.ERROR_MESSAGE);
            if(name == null) return;
        }
        IDiagram d = new BaseDiagram(name);// TODO - here is where the custrom diagrams would be created and placed into the editor
        d_tabbedPane.add(name, new DiagramEditor(d));
        Console.getInstance().printLine("Created new diagram, " + d.getName());
    }//GEN-LAST:event_d_newTabMenuActionPerformed

    private void d_deleteTabMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d_deleteTabMenuActionPerformed
        DiagramEditor v = getCurrentTab();
        if(v == null) {
            JOptionPane.showMessageDialog(this, "No tab to delete.");
            return;
        }
        IDiagram d = v.getDiagram();
        int b = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + d.getName() + "?", "" ,JOptionPane.YES_NO_OPTION);
        if(b != JOptionPane.YES_OPTION) return;
        int i = d_tabbedPane.getSelectedIndex();
        Console.getInstance().printLine("Deleted diagram, " + d.getName());
        v.cleanUp();
        d_tabbedPane.remove(i);
    }//GEN-LAST:event_d_deleteTabMenuActionPerformed

    private void d_noneSelectionCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d_noneSelectionCommandActionPerformed
        DiagramEditor d = getCurrentTab();
        if(d != null) {
            d.clearSelection();
            Console.getInstance().printLine("Cleared selection.");
        }
    }//GEN-LAST:event_d_noneSelectionCommandActionPerformed

    private void d_allSelectionCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d_allSelectionCommandActionPerformed
        DiagramEditor d = getCurrentTab();
        if(d != null) {
            d.selectAll();
            Console.getInstance().printLine("Selected all.");
        }
    }//GEN-LAST:event_d_allSelectionCommandActionPerformed

    private void d_invertSelectCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d_invertSelectCommandActionPerformed
        DiagramEditor d = getCurrentTab();
        if(d != null) {
            d.invertSelection();
            Console.getInstance().printLine("Inverted selection.");
        }
    }//GEN-LAST:event_d_invertSelectCommandActionPerformed

private void d_copyCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d_copyCommandActionPerformed
    // TODO add your handling code here:
    System.out.print("Copy");
   
}//GEN-LAST:event_d_copyCommandActionPerformed

private void d_cutCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d_cutCommandActionPerformed
    
}//GEN-LAST:event_d_cutCommandActionPerformed

private void d_pasteCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d_pasteCommandActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_d_pasteCommandActionPerformed

private void d_zoomWindowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d_zoomWindowButtonActionPerformed
    setCurrentMacro(MacroRegistry.MacroID.ZOOMWINDOW);
}//GEN-LAST:event_d_zoomWindowButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Application().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem d_allSelectionCommand;
    private javax.swing.JTextArea d_consoleDisplay;
    private javax.swing.JMenuItem d_copyCommand;
    private javax.swing.JMenuItem d_cutCommand;
    private javax.swing.JMenuItem d_deleteTabMenu;
    private javax.swing.JMenu d_editMenu;
    private javax.swing.JMenu d_fileMenu;
    private javax.swing.JMenuItem d_invertSelectCommand;
    private javax.swing.JMenuItem d_newTabMenu;
    private javax.swing.JMenuItem d_noneSelectionCommand;
    private javax.swing.JTree d_paletteTree;
    private javax.swing.JMenuItem d_pasteCommand;
    private javax.swing.JTabbedPane d_tabbedPane;
    private javax.swing.JButton d_zoomWindowButton;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
